#!/bin/bash

# Malware Scanning Script
# Pulls a Docker image, saves it as a tar file, and scans it with YARA rules.
# If the `rules` directory is not found, it populates it with rules from Airbnb's BinaryAlert repository.
# 
# Command-line switch (-r) to specify a single YARA rule to run.
# Example usage:
# ./malware_scan.sh -r rules/public/eicar.yara ubuntu:latest

# Default YARA rule
DEFAULT_RULE="rules/rules/public/eicar.yara"

# Check for required dependencies
check_dependencies() {
    for cmd in docker yara git curl; do
        if ! command -v $cmd &> /dev/null; then
            echo "Error: $cmd is not installed. Please install it before running the script."
            exit 1
        fi
    done
}

# Ensure the rules directory is populated
setup_rules_directory() {
    local rules_dir="rules"
    if [ ! -d "$rules_dir" ]; then
        echo "[INFO] Rules directory not found. Cloning Airbnb BinaryAlert repository..."
        git clone https://github.com/airbnb/binaryalert.git "$rules_dir" || { echo "[ERROR] Failed to clone rules repository."; exit 1; }
    else
        echo "[INFO] Rules directory found. Using existing rules."
    fi
}

# Pull the Docker image
pull_image() {
    local image_name=$1
    echo "[INFO] Pulling Docker image: $image_name..."
    docker pull "$image_name" || { echo "[ERROR] Failed to pull image $image_name"; exit 1; }
}

# Save the Docker image as a tar file
save_image_as_tar() {
    local image_name=$1
    local output_file=$2
    echo "[INFO] Saving Docker image to tar file: $output_file..."
    docker save "$image_name" -o "$output_file" || { echo "[ERROR] Failed to save image $image_name"; exit 1; }
}

# Run YARA scan with a specified rule
run_yara_scan() {
    local rule_file=$1
    local target_file=$2
    echo "[INFO] Scanning $target_file with YARA rule: $rule_file..."
    yara "$rule_file" "$target_file" && echo "[SUCCESS] Detection triggered." || echo "[INFO] No matches found."
}

# Test with EICAR file
test_with_eicar() {
    local rule_file=$1
    local eicar_file="eicar_test_file.txt"
    echo "[INFO] Downloading EICAR test file for validation..."
    curl -fsSL "https://www.eicar.org/download/eicar.com.txt" -o "$eicar_file" || { echo "[ERROR] Failed to download EICAR test file."; exit 1; }
    echo "[INFO] Running YARA scan on EICAR test file..."
    yara "$rule_file" "$eicar_file" && echo "[SUCCESS] Detection triggered for EICAR test file." || echo "[ERROR] No detection for EICAR test file."
    rm -f "$eicar_file"
}

# Main function
main() {
    check_dependencies
    setup_rules_directory

    # Default values
    local rule_file="$DEFAULT_RULE"
    local image_name=""
    local output_tar="image.tar"

    # Parse command-line arguments
    while getopts "r:" opt; do
        case $opt in
            r) rule_file=$OPTARG ;;
            *) echo "Usage: $0 [-r yara_rule] <docker_image>" && exit 1 ;;
        esac
    done
    shift $((OPTIND - 1))

    image_name=$1
    if [ -z "$image_name" ]; then
        echo "Usage: $0 [-r yara_rule] <docker_image>"
        exit 1
    fi

    # Validate rule file
    if [ ! -f "$rule_file" ]; then
        echo "[ERROR] Specified rule file does not exist: $rule_file"
        exit 1
    fi

    # Pull, save, and scan
    pull_image "$image_name"
    save_image_as_tar "$image_name" "$output_tar"
    run_yara_scan "$rule_file" "$output_tar"

    # Test with EICAR
    # test_with_eicar "$rule_file"

    echo "[INFO] Malware scan completed for image: $image_name"
}

# Execute the script
main "$@"
